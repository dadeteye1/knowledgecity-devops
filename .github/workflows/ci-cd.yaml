name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # ðŸ”¹ Step 1: Run Linting (YAML, Dockerfiles, Terraform)
    - name: Lint Terraform
      uses: hashicorp/setup-terraform@v2
    - run: terraform fmt -check -recursive

    - name: Lint Dockerfiles
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: "apps/**/Dockerfile"

    - name: Lint YAML (Kubernetes manifests)
      run: |
        pip install yamllint
        yamllint .

    # ðŸ”¹ Step 2: Run Tests
    - name: Run PHP Unit Tests
      run: |
        cd apps/php-monolith
        if [ -f composer.json ]; then
          sudo apt-get update && sudo apt-get install -y php-cli unzip
          curl -sS https://getcomposer.org/installer | php
          php composer.phar install
          ./vendor/bin/phpunit || echo "No tests found"
        fi

    - name: Run Node Tests (Dashboard)
      run: |
        cd apps/dashboard
        if [ -f package.json ]; then
          npm install
          npm test || echo "No tests found"
        fi

    # ðŸ”¹ Step 3: Build Docker images
    - name: Build Docker images
      run: |
        docker build -t ghcr.io/${{ github.repository_owner }}/php-monolith:latest ./apps/php-monolith
        docker build -t ghcr.io/${{ github.repository_owner }}/video-encoder:latest ./apps/video-encoder
        docker build -t ghcr.io/${{ github.repository_owner }}/dashboard:latest ./apps/dashboard

    # ðŸ”¹ Step 4: Push images to GHCR
    - name: Login to GHCR
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Push Docker images
      run: |
        docker push ghcr.io/${{ github.repository_owner }}/php-monolith:latest
        docker push ghcr.io/${{ github.repository_owner }}/video-encoder:latest
        docker push ghcr.io/${{ github.repository_owner }}/dashboard:latest

    # ðŸ”¹ Step 5: Deploy to Kubernetes with kubectl + Helm
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: v1.27.1

    - name: Deploy with Helm + kubectl
      run: |
        helm upgrade --install clickhouse oci://registry-1.docker.io/bitnami/clickhouse \
          --namespace knowledgecity --create-namespace
        kubectl apply -f terraform-rendered/ # or use `kubectl apply -k`

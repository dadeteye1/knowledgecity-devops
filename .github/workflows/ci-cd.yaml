name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  build-test-lint:
    name: Build, Test & Lint Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [php-monolith, video-encoder, dashboard]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js (for dashboard tests)
        if: matrix.service == 'dashboard'
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Set up PHP (for monolith tests)
        if: matrix.service == 'php-monolith'
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Install dependencies & run tests
        working-directory: apps/${{ matrix.service }}
        run: |
          if [ -f "package.json" ]; then
            npm install
            npm run lint
            npm test || echo "No tests found"
          fi
          if [ -f "composer.json" ]; then
            composer install
            ./vendor/bin/phpunit || echo "No PHP tests found"
          fi

      - name: Lint Dockerfile
        run: |
          docker run --rm -i hadolint/hadolint < apps/${{ matrix.service }}/Dockerfile

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build-test-lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run Trivy scan (containers + IaC)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

      - name: Run tfsec scan (Terraform security)
        uses: aquasecurity/tfsec-action@v1.0.0

  build-and-push:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      matrix:
        service: [php-monolith, video-encoder, dashboard]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Docker image
        working-directory: apps/${{ matrix.service }}
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/knowledgecity/${{ matrix.service }}:latest
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          aws-region: us-east-1

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.29.0'

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Deploy ClickHouse via Helm
        run: |
          helm repo add clickhouse https://clickhouse.github.io/helm-charts
          helm upgrade --install clickhouse clickhouse/clickhouse --namespace knowledgecity --create-namespace

      - name: Deploy services
        run: |
          kubectl apply -f apps/php-monolith/k8s-deploy.yaml -n knowledgecity
          kubectl apply -f apps/video-encoder/k8s-deploy.yaml -n knowledgecity
          kubectl apply -f apps/dashboard/k8s-deploy.yaml -n knowledgecity
